AND (S.team_home = 'Green Bay Packers' OR
S.team_away = 'Green Bay Packers')
AND SCHEDULE_WEEK <> 'Division';"))
gb11 = as_tibble(dbGetQuery(con, "SELECT S.*
FROM SCORES S
WHERE S.SCHEDULE_SEASON = '2011'
AND (S.team_home = 'Green Bay Packers' OR
S.team_away = 'Green Bay Packers')
AND SCHEDULE_WEEK <> 'Division';"))
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
library(tidyverse)
library(lubridate)
library(RSQLite)
con = dbConnect(RSQLite::SQLite(), dbname = "nfl.db")
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
getwd()
dbpath = "C:\\Users\\danwa\\Documents\\Projects\\acipenser\\nfl_bets\\nfl.db"
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
gb = as_tibble(gb)
str(gb)
# DPLYR - LUBRIDATE - FIND NEAREST FRIDAY FOR ALL GAMES
gb = as_tibble(gb)
gb %>% mutate(schedule_date = as_date(schedule_date),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical.factor(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical.factor(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
gb$schedule_date
gb %>% mutate(schedule_date = parse_date_time(schedule_date, c('ymd')),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical.factor(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical.factor(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
gb %>% mutate(schedule_date = parse_date_time(schedule_date, c('ymd')),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
gb %>% mutate(schedule_date = parse_date_time(schedule_date, c('dmy')),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
gb %>% mutate(schedule_date = parse_date_time(schedule_date, c('mdy')),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) %>%
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
lastfri <- function(x) {
7 * floor(as.numeric(x-1+4)/7) + as.Date(1-4, origin="1970-01-01")
}
as.Date(1-4, origin="1970-01-01")
# FUNCTION TO FIND LAST FRIDAY
lastfri <- function(x) {
7 * floor(as.numeric(x-5+4)/7) + as.Date(5-4, origin="1970-01-01")
}
lastfri(gb$schedule_date[1])
gb$schedule_date[1]
str(gb$schedule_date[1])
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) -> gb
lastfri(gb$schedule_date[1])
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) %>%
mutate(PREV_FRI = lastfri(gb$schedule_date))
dbpath = "C:\\Users\\danwa\\Documents\\Projects\\acipenser\\nfl_bets\\nfl.db"
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
# DPLYR - LUBRIDATE - FIND NEAREST FRIDAY FOR ALL GAMES
gb = as_tibble(gb)
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE))
dbpath = "C:\\Users\\danwa\\Documents\\Projects\\acipenser\\nfl_bets\\nfl.db"
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
# DPLYR - LUBRIDATE - FIND NEAREST FRIDAY FOR ALL GAMES
gb = as_tibble(gb)
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) %>%
mutate(PREV_FRI = lastfri(gb$schedule_date))
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) -> gb
str(gb)
dbpath = "C:\\Users\\danwa\\Documents\\Projects\\acipenser\\nfl_bets\\nfl.db"
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
# DPLYR - LUBRIDATE - FIND NEAREST FRIDAY FOR ALL GAMES
gb = as_tibble(gb)
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) -> gb
str(gb)
gb$PREV_FRI = lastfri(gb$schedule_date)
str(gb)
install.packages("readODS")
library(tidyverse)
library(readODS)
setwd("C:/Users/danwa/Desktop")
dat = read_ods(paste(getwd(), "/Finances 2020.ods", sep = ""))
head(dat)
dat %>% remove_na()
dat = dat[ , 1:8]
head(dat)
dat %>% select(Subtype %in% c("Regular Job", "Credit Card"))
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card"))
dat = read_ods(paste(getwd(), "/Finances 2020.ods", sep = ""))
dat = dat[ , 2:8]
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-Subtype, -Name, names_to = "Month", values_to = "Amount")
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-Subtype, -Name, names_to = "Month", values_to = "Amount")
head(dat)
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount")
geom_bar(stat = 'identity')
geom_bar(stat = 'identity')
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, colour = Subtype) +
geom_bar(stat = 'identity')
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, colour = Subtype)) +
geom_bar(stat = 'identity')
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity')
library(lubridate)
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
mutate(Month = month(Month))
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(aes(x = Month, y = Amount)) +
geom_bar(stat = 'identity', position = 'dodge')
dat = read_ods(paste(getwd(), "/Finances 2020.ods", sep = ""))
dat = dat[ , 2:8]
dat = read_ods(paste(getwd(), "/Finances 2020.ods", sep = ""))
dat = dat[ , 2:8]
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
mutate(Month = month(Month))
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
mutate(Month = my(Month))
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge')
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
mutate(Amount = scales::dollar(Amount)) %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge')
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
mutate(Amount = scales::dollar(Amount))
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge')
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Total Credit Card Bills")
dat = dat[ , 1:8]
dat = read_ods(paste(getwd(), "/Finances 2020.ods", sep = ""))
dat = dat[ , 1:8]
str(dat)
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
select(-Type) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Total Credit Card Bills")
dat %>% select(-Subtype, -Name)
dat %>% select(-Subtype, -Name) %>%
slice(-21:n())
dat %>% select(-Subtype, -Name) %>%
slice(-21:-n())
dat %>% select(-Subtype, -Name) %>%
slice(-21:-n()) %>%
pivot_longer(-Type, names_to = "Month", values_to = "Amount") %>%
mutate(Amount = ifelse(Type %in% c('Bill'), -1*Amount, Amount))
dat %>% select(-Subtype, -Name) %>%
slice(-21:-n()) %>%
pivot_longer(-Type, names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Type)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Outflow")
setwd("C:/Users/danwa/Documents/Important Stuff/Financials/WalkerHousehold")
dat = read_ods(paste(getwd(), "/Finances 2020.ods", sep = ""))
dat = dat[ , 1:8]
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
select(-Type) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Total Credit Card Bills")
dat %>% select(-Subtype, -Name) %>%
slice(-21:-n()) %>%
pivot_longer(-Type, names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Type)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Outflow")
dat %>% filter(Subtype %in% c("Regular Job", "Credit Card")) %>%
select(-Type) %>%
group_by(Subtype) %>%
pivot_longer(-c(Subtype, Name), names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Subtype)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Total Credit Card Bills")
ggsave("End of May 2020 CC Comparison.png")
dat %>% select(-Subtype, -Name) %>%
slice(-21:-n()) %>%
pivot_longer(-Type, names_to = "Month", values_to = "Amount") %>%
ggplot(aes(x = Month, y = Amount, fill = Type)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Monthly Income vs. Outflow")
ggsave("End of May 2020 Net Rev.png")
library(tidyverse)
library(lubridate)
library(RSQLite)
# FUNCTION TO FIND LAST FRIDAY
lastfri <- function(x) {
7 * floor(as.numeric(x-5+4)/7) + as.Date(5-4, origin="1970-01-01")
}
dbpath = "C:\\Users\\danwa\\Documents\\Projects\\acipenser\\nfl_bets\\nfl.db"
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
gb = as_tibble(dbGetQuery(con, "SELECT * FROM GB08_11;"))
dbDisconnect(con)
# DPLYR - LUBRIDATE - FIND NEAREST FRIDAY FOR ALL GAMES
gb = as_tibble(gb)
gb %>% mutate(schedule_date = as_date(parse_date_time(schedule_date, c('mdy'))),
schedule_season = as.integer(schedule_season),
schedule_week = as.integer(schedule_week),
schedule_playoff = as.logical(schedule_playoff),
score_home = as.integer(score_home),
score_away = as.integer(score_away),
team_favorite_id = as.factor(team_favorite_id),
spread_favorite = as.numeric(spread_favorite),
over_under_line = as.numeric(over_under_line),
stadium_neutral = as.logical(stadium_neutral),
weather_temperature = as.numeric(weather_temperature),
weather_wind_mph = as.numeric(weather_wind_mph),
weather_humidity = as.numeric(weather_humidity),
HOME_FLAG = as.integer(HOME_FLAG),
FAVORITE_FLAG = as.integer(FAVORITE_FLAG),
GB_SCORE = as.integer(GB_SCORE),
OPP_SCORE = as.integer(OPP_SCORE),
TOTAL_SCORE = as.integer(TOTAL_SCORE)) -> gb
gb$PREV_FRI = lastfri(gb$schedule_date)
gb$PREV_FRI
colSums(is.na(gb))
min(gb$schedule_date)
max(gb$schedule_date)
dbpath = "C:\\Users\\danwa\\Documents\\Projects\\acipenser\\nfl_bets\\nfl.db"
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
dbWriteTable(con, 'GB_WITH_FRIDAY')
dbDisconnect(con)
dbWriteTable(con, 'GB_WITH_FRIDAY', gb)
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
dbWriteTable(con, 'GB_WITH_FRIDAY', gb)
dbDisconnect(con)
str(gb)
as.character(gb$PREV_FRI)
gb$PREV_FRI = as.character(lastfri(gb$schedule_date))
dbWriteTable(con, 'GB_WITH_FRIDAY', gb, overwrite = TRUE, append = FALSE)
con = dbConnect(RSQLite::SQLite(), dbname = dbpath)
dbWriteTable(con, 'GB_WITH_FRIDAY', gb, overwrite = TRUE, append = FALSE)
